library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity flag_register_file is
port (
read_addr_a : in std_logic_vector(3 downto 0);
read_addr_b : in std_logic_vector(3 downto 0);

write_addr_a: in std_logic_vector(3 downto 0);
write_addr_b: in std_logic_vector(3 downto 0);

data_in_a : in std_logic_vector(1 downto 0);
data_in_b : in std_logic_vector(1 downto 0);

data_out_a : out std_logic_vector(7 downto 0);
data_out_b : out std_logic_vector(7 downto 0);

write_en_a: in std_logic;
write_en_b: in std_logic;

full: out std_logic;

clk: in std_logic;
clear: in std_logic;
reset: in std_logic;

fresh_rr_out_1: out std_logic_vector(3 downto 0);
fresh_rr_out_2: out std_logic_vector(3 downto 0);
rename_reg_addr_in_1: in std_logic_vector(3 downto 0);
rename_reg_addr_in_2: in std_logic_vector(3 downto 0);
reg_rename_en_1: in std_logic;
reg_rename_en_2: in std_logic


);
end entity flag_register_file;

architecture behavioural of flag_register_file is
type flagRegFile is array(0 to 15) of std_logic_vector(7 downto 0);
shared variable cz : falgRegFile ;

begin
read_process: process(read_addr_a, read_addr_b)

begin 

data_out_a <= cz(to_integer(unsigned(read_addr_a)));
data_out_b <= cz(to_integer(unsigned(read_addr_b)));
end process;


write_process: process(clk, clear, reset) 
begin
  if(reset = '1') then
	l1: for k in 0 to 15 loop
	  cz(k) := (others => '0');
	end loop l1; 
	 
   elsif (clear = '1') then
	 l2: for k in 0 to 15 loop
	  registers(k)(5 downto 0) := "000000";
	 end loop l2; 
	
   elsif(rising_edge(clk)) then
   	if(write_en_a = '1' and not (write_addr_a = "000") ) then -- if write enabled and adress is correct start writing process
		   if(cz(0)(4 downto 1) = write_addr_a) then -- if the tag of AR is same as index of RR
			  cz(0)(5) := '0'; --make AR unbusy
			end if;
		cz(0)(7 downto 6) := data_in_a; -- put data into AR
		cz(to_integer(unsigned(write_addr_a)))(7 downto 6) := data_in_a; -- put data into RR
		cz(to_integer(unsigned(write_addr_a)))(5) := '0'; -- set RR as unbusy
		cz(to_integer(unsigned(write_addr_a)))(0) := '1'; -- set RR as valid
		end if;
		
		if(write_en_b = '1' and not (write_addr_b = "000") ) then -- if write enabled and adress is correct start writing process
		   if(cz(0)(4 downto 1) = write_addr_b) then -- if the tag of AR is same as index of RR
			  cz(0)(5) := '0'; --make AR unbusy
			end if;
		cz(0)(7 downto 6) := data_in_b; -- put data into AR
		cz(to_integer(unsigned(write_addr_b)))(7 downto 6) := data_in_b; -- put data into RR
		cz(to_integer(unsigned(write_addr_b)))(5) := '0'; -- set RR as unbusy
		cz(to_integer(unsigned(write_addr_b)))(0) := '1'; -- set RR as valid
		end if;
		
	end if;
end process;
end architecture;

--2 free registers
--2 enable for renaming
--2 writes from ROB(2 ar and 2 rr)
--2 reads from decode
